//  //   ///
//  Import LIBRARIES
import 'package:flutter/material.dart';
import 'package:signals_flutter/signals_flutter.dart';
//  Import  FILES
//  //   ///

class HomePage extends StatelessWidget {
  final String pageTitle;

  HomePage({super.key, required this.pageTitle});

  final _counter = signal(0);

  // Schau, Mutter, nicht ein setState(() {});
  void _incrementCounter() {
    _counter.value++;
  }

  final List<int> list = [0, 1, 2, 3, 4, 5];

  // To display the sorted list. Need to make it a signal because we want to watch it.
  final myListSignal = listSignal(<int>[]);

  // Helper function
  void showSnackbar({required BuildContext context, required String message}) {
    // Remove any existing snackbar
    ScaffoldMessenger.of(context).removeCurrentSnackBar();

    // Show the new snackbar
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    debugPrint('======> HomePage build <=======');
    // To hold the pointer to the stop signal for the effect
    void Function() disposeEffect = effect(() {});

    final isCounterEven = computed(() => _counter.value.isEven);

    return Scaffold(
      appBar: AppBar(
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        title: Text(pageTitle),
      ),
      body: Center(
        child: Padding(
          padding: const EdgeInsets.all(32.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.start,
            children: <Widget>[
              const SizedBox(height: 32.0),
              const Text(
                'Showing the use of effect to display a sorted list and how we can start and stop the effect function.\n\nWatch the times that the build function of this HomePage is called in the debug console.',
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 32.0),
              const Text('Original List:'),
              Text(list.toString()),
              const SizedBox(height: 32.0),
              const Text(
                'You have pushed the button this many times:',
              ),
              Watch(
                (context) {
                  return Column(
                    children: <Widget>[
                      Text('${_counter.value}',
                          style: TextStyle(
                              color: isCounterEven.value
                                  ? Colors.blue
                                  : Colors.red,
                              fontSize: 25)),
                      const SizedBox(height: 32.0),
                      const Text('Generated by the effect function:'),
                      Text(myListSignal.peek().toString(),
                          style: TextStyle(
                              color: isCounterEven.value
                                  ? Colors.blue
                                  : Colors.red,
                              fontSize: 25)),
                      const SizedBox(height: 32.0),
                    ],
                  );
                },
              ),
            ],
          ),
        ),
      ),
      floatingActionButton: Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: <Widget>[
          // Increment
          FloatingActionButton(
            onPressed: _incrementCounter,
            tooltip: 'Increment Counter and Sort',
            child: const Icon(Icons.add),
          ),
          const SizedBox(width: 64.0),
          // Start effect
          Container(
            decoration: BoxDecoration(
              border: Border.all(color: Colors.blue, width: 2),
              borderRadius: BorderRadius.circular(10),
            ),
            padding: const EdgeInsets.all(15),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: <Widget>[
                const Text('Effect'),
                Row(
                  children: <Widget>[
                    FloatingActionButton(
                        // backgroundColor: isEffect ? Colors.grey : Colors.blue,
                        onPressed: () {
                          debugPrint(
                              '=======> Start Effect Clicked <=========');

                          // void Function()
                          disposeEffect = effect(() {
                            myListSignal.value = (_counter.value.isEven
                                    ? [...list]
                                    : [...list].reversed)
                                .toList();
                          });
                          showSnackbar(
                              context: context, message: 'Effect is on');
                        },
                        tooltip: 'Start Effect',
                        child: const Text('Start')),
                    const SizedBox(width: 32.0),
                    // Stop effect
                    FloatingActionButton(
                      // backgroundColor: isEffect ? Colors.blue : Colors.grey,
                      onPressed: () {
                        debugPrint('=======> Stop Effect Clicked <=========');
                        myListSignal.value = [];
                        disposeEffect();
                        showSnackbar(
                            context: context, message: 'Effect is off');
                      },
                      tooltip: 'Stop Effect',
                      child: const Text('Stop'),
                    ),
                  ],
                ),
              ],
            ),
          )
        ],
      ),
    );
  }
}
